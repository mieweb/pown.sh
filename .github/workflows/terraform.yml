name: "OS Matrix Test"

on:
  # Trigger on pull request to main
  pull_request:
    branches:
      - main

  # Trigger manually
  workflow_dispatch:
    inputs:
      os_version:
        description: "Operating System Version"
        required: false
        default: ""

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev # Specify the dev environment
    strategy:
      matrix:
        os: ["debian", "amazon-linux"]
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Fetch AMI ID for ${{ matrix.os }}
        id: fetch_ami
        run: |
          case "${{ matrix.os }}" in
            debian)
              os_filter="debian-12-amd64-*"
              owners="136693071363" # Debian owner ID
              ;;
            amazon-linux)
              os_filter="amzn2-ami-hvm-*-x86_64-gp2"
              owners="137112412989" # Amazon Linux owner ID
              ;;
          esac
          ami_id=$(aws ec2 describe-images --filters "Name=name,Values=$os_filter" "Name=state,Values=available" \
                  --owners $owners \
                  --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
          echo "AMI_ID=$ami_id"
          echo "ami_id=$ami_id" >> $GITHUB_ENV  # Store in the runtime environment

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: |
          terraform apply -auto-approve \
            -var="access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="ami_id=${{ env.ami_id }}"  # Use directly from the runtime

      - name: Fetch Instance IP
        id: instance_info
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "INSTANCE_IP=$INSTANCE_IP"
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_ENV  # Save the instance IP in the runtime environment

      - name: Add SSH Key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install pown.sh via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.instance_ip }} << 'EOF'
          curl -O https://raw.githubusercontent.com/anishapant21/pown.sh/main/pown.sh
          chmod +x pown.sh
          ./pown.sh
          EOF

      - name: Destroy Terraform
        if: always()
        run: |
          terraform destroy -auto-approve \
            -var="access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="ami_id=${{ env.ami_id }}"
