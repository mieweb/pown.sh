name: "OS Matrix Test"
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      os_version:
        description: "Operating System Version"
        required: false
        default: ""

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        os: ["debian", "amazon-linux"]
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Fetch AMI ID for ${{ matrix.os }}
        id: fetch_ami
        run: |
          case "${{ matrix.os }}" in
            debian)
              os_filter="debian-12-amd64-*"
              owners="136693071363" # Debian owner ID
              ;;
            amazon-linux)
              os_filter="amzn2-ami-hvm-*-x86_64-gp2"
              owners="137112412989" # Amazon Linux owner ID
              ;;
          esac

          ami_id=$(aws ec2 describe-images \
            --filters "Name=name,Values=$os_filter" "Name=state,Values=available" \
            --owners $owners \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

          if [ -z "$ami_id" ]; then
            echo "Failed to find valid AMI ID"
            exit 1
          fi

          echo "ami_id=$ami_id" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: |
          terraform apply -auto-approve \
            -var="access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="ami_id=${{ steps.fetch_ami.outputs.ami_id }}"

      - name: Fetch Instance IP
        id: ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to get instance IP"
            exit 1
          fi
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Wait for Instance
        run: |
          echo "Waiting for instance to be ready..."
          sleep 60

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.ip.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Install pown.sh via SSH
        run: |
          SSH_USER="${{ matrix.os == 'debian' && 'admin' || 'ec2-user' }}"
          max_retries=3
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            if ssh -o ConnectTimeout=30 -i ~/.ssh/id_rsa $SSH_USER@${{ steps.ip.outputs.instance_ip }} "curl -O https://raw.githubusercontent.com/anishapant21/pown.sh/main/pown.sh && chmod +x pown.sh && ./pown.sh"; then
              break
            else
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "Failed to connect after $max_retries attempts"
                exit 1
              fi
              echo "Connection failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Destroy Terraform
        if: always()
        run: |
          terraform destroy -auto-approve \
            -var="access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="ami_id=${{ steps.fetch_ami.outputs.ami_id }}"
